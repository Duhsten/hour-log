const fs = require('fs');
const moment = require('moment');
const dataFile = 'data.json';
const Table = require('cli-table'); 
const createPDFReport = require('./pdfReport'); // Import the new module
const printFlag = process.argv.includes('-print');
function loadData() {
  if (!fs.existsSync(dataFile)) {
    return {
      records: [],
    };
  }

  const rawData = fs.readFileSync(dataFile);
  return JSON.parse(rawData);
}

function saveData(data) {
  fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));
}

function clockIn() {
  const data = loadData();
  data.records.push({ in: moment().toISOString() });
  saveData(data);
  console.log('Clocked in at', moment().format('YYYY-MM-DD HH:mm:ss'));
}

function clockOut() {
  const data = loadData();
  const lastRecord = data.records[data.records.length - 1];

  if (!lastRecord || lastRecord.out) {
    console.log('Error: You must clock in before clocking out.');
    return;
  }

  lastRecord.out = moment().toISOString();
  saveData(data);
  console.log('Clocked out at', moment().format('YYYY-MM-DD HH:mm:ss'));
}

function biWeeklyReport() {
    const data = loadData();
    const mostRecentMonday = moment().startOf('week').subtract(1, 'weeks').day(1);
    const twoWeeksAgo = mostRecentMonday.clone().subtract(2, 'weeks');
  
    if (moment().day() === 0) {
      mostRecentMonday.subtract(1, 'weeks');
    }
  
    const filteredRecords = data.records.filter(record => {
      return moment(record.in).isAfter(twoWeeksAgo) && moment(record.in).isBefore(mostRecentMonday.add(2, 'weeks'));
    });
  
    let totalHours = 0;
  
    const table = new Table({
      head: ['Day', 'Date', 'In', 'Out', 'Hours'],
      colWidths: [10, 15, 12, 12, 10],
    });
  
    filteredRecords.forEach(record => {
      const inTime = moment(record.in);
      const outTime = record.out ? moment(record.out) : moment();
      const duration = moment.duration(outTime.diff(inTime)).asHours();
      totalHours += duration;
  
      table.push([
        inTime.format('dddd'),
        inTime.format('YYYY-MM-DD'),
        inTime.format('HH:mm:ss'),
        outTime.format('HH:mm:ss'),
        duration.toFixed(2),
      ]);
    });
  
    console.log(`Bi-weekly report (from ${twoWeeksAgo.format('YYYY-MM-DD')} to ${mostRecentMonday.add(2, 'weeks').subtract(1, 'days').format('YYYY-MM-DD')}):`);
    console.log(table.toString());
    console.log('Total hours worked:', totalHours.toFixed(2));
    console.log('\nGenerated using a program created by Dustin Osborne');
}

function biWeeklyReportHtml() {
    const data = loadData();
    const mostRecentMonday = moment().startOf('week').subtract(1, 'weeks').day(1);
    const twoWeeksAgo = mostRecentMonday.clone().subtract(2, 'weeks');
  
    if (moment().day() === 0) {
      mostRecentMonday.subtract(1, 'weeks');
    }
  
    const filteredRecords = data.records.filter(record => {
      return moment(record.in).isAfter(twoWeeksAgo) && moment(record.in).isBefore(mostRecentMonday.add(2, 'weeks'));
    });
  
    let totalHours = 0;
    let reportHtml = `
      <html>
        <head>
          <style>
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid black; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
          </style>
        </head>
        <body>
          <h1>Bi-weekly report (from ${twoWeeksAgo.format('YYYY-MM-DD')} to ${mostRecentMonday.add(2, 'weeks').subtract(1, 'days').format('YYYY-MM-DD')}):</h1>
          <table>
            <tr>
              <th>Day</th>
              <th>Date</th>
              <th>In</th>
              <th>Out</th>
              <th>Hours</th>
            </tr>
    `;
  
    filteredRecords.forEach(record => {
      const inTime = moment(record.in);
      const outTime = record.out ? moment(record.out) : moment();
      const duration = moment.duration(outTime.diff(inTime)).asHours();
      totalHours += duration;
  
      reportHtml += `
        <tr>
          <td>${inTime.format('dddd')}</td>
          <td>${inTime.format('YYYY-MM-DD')}</td>
          <td>${inTime.format('HH:mm:ss')}</td>
          <td>${outTime.format('HH:mm:ss')}</td>
          <td>${duration.toFixed(2)}</td>
          </tr>
          `;
        });
      
        reportHtml += `
            </table>
            <p>Total hours worked: ${totalHours.toFixed(2)}</p>
            <p>Generated by Dustin Osborne</p>
          </body>
        </html>
        `;
      
        return reportHtml;
      }
      
      if (process.argv.length < 3) {
        console.error('Error: missing command');
      } else {
        const command = process.argv[2];
        const printFlag = process.argv.includes('-print');
      
        switch (command) {
          case 'in':
            clockIn();
            break;
          case 'out':
            clockOut();
            break;
            case 'report':
                biWeeklyReport();
                if (printFlag) {
                  const reportHtml = biWeeklyReportHtml();
                  createPDFReport(reportHtml);
                }
                break;
              
          default:
            console.error(`Error: unknown command "${command}"`);
        }
      }
      


